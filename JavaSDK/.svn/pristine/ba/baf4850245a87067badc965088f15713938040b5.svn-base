package cmcc.iot.onenet.javasdk.response;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.ObjectMapper;

import cmcc.iot.onenet.javasdk.exception.OnenetApiException;

public class BasicResponse<T> {
	private final Logger logger = LoggerFactory.getLogger(this.getClass());
	public int errno;
	public String error;
    @JsonProperty("data")
    public Object dataInternal;
    public T data;


	public int getErrno() {
        return errno;
    }

    public void setErrno(int errno) {
        this.errno = errno;
    }

    public String getError() {
        return error;
    }

    public void setError(String error) {
        this.error = error;
    }

    @JsonGetter("data")
    public Object getDataInternal() {
        return dataInternal;
    }
    @JsonSetter("data")
    public void setDataInternal(Object dataInternal) {
        this.dataInternal = dataInternal;
    }

    public T getData() {
        return data;
    }

    public void setData(T data) {
        this.data = data;
    }
    public String toJson(){
    	ObjectMapper mapper = new ObjectMapper();
    	String json=null;
		try {
			json = mapper.writeValueAsString(this);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			logger.error("http close error:" + e.getMessage());
			throw new OnenetApiException();
		}
    	return json;
    }
}
